Starting Dominion Unit Tests...


[GO--->] Unit Test: drawCard
[PASSED] Test 1 : Empty Deck, Empty discard pile.
[PASSED] Test 2 : Empty Deck, Non empty discard pile.
[PASSED] Test 2 : great_hall is in hand[0].
[PASSED] Test 3 : Empty Hand, Non empty Deck
[PASSED] Test 3 : baron is in hand[0].
[PASSED] Test 4 : Non empty Hand, Non empty Deck
[PASSED] Test 4 : baron is in hand[0].
[PASSED] Test 4 : great_hall is in hand[1].
[PASSED] Unit Test: drawCard


[GO--->] Unit Test: discardCard
[PASSED] Test 1 : One card in hand, remove[0]
[PASSED] Test 2 : Two cards in hand, remove hand[0]
[PASSED] Test 2 : baron is in hand[0]
[PASSED] Test 3 : 2 cards in hand, remove hand[1]
[PASSED] Test 3 : great_hall is in hand[0]
[PASSED] Test 4 : 2 cards in hand, played hand[1]
[PASSED] Test 4 : great_hall is in hand[0]
[PASSED] Test 4 : 1 card in played cards
[PASSED] Test 4 : baron is in playedCards[0]
[PASSED] Unit Test: discardCard


[GO--->] Unit Test: updateCoins
[PASSED] Test 1 : 3 copper in hand, coins = 3
[PASSED] Test 2 : 3 silver in hand, coins = 6
[PASSED] Test 3 : 3 gold in hand, coins = 9
[PASSED] Test 4 : 10 bonus, coins = 10)
[PASSED] Unit Test: updateCoins


[GO--->] Unit Test: gainCard
[PASSED] Test 1 : Requested card not in supply
[PASSED] Test 2 : Requested card is invalid
[PASSED] Test 3 : Requested card to discard
[PASSED] Test 3 : supplyCound[testCard] = 1
[PASSED] Test 3 : discardCount = 1
[PASSED] Test 3 : discard[0] = testCard
[PASSED] Test 3 : Requested card to discard
[PASSED] Test 3 : supplyCound[testCard] = 0
[PASSED] Test 3 : discardCount = 2
[PASSED] Test 3 : discard[0] = testCard
[PASSED] Test 4 : Requested card to discard
[PASSED] Test 4 : supplyCound[testCard] = 1
[PASSED] Test 4 : deckCount = 1
[PASSED] Test 4 : deck[0] = testCard
[PASSED] Test 4 : Requested card to discard
[PASSED] Test 4 : supplyCound[testCard] = 0
[PASSED] Test 4 : deckCount = 2
[PASSED] Test 4 : deck[0] = testCard
[PASSED] Test 5 : Requested card to discard
[PASSED] Test 5 : supplyCound[testCard] = 1
[PASSED] Test 5 : handCount = 1
[PASSED] Test 5 : hand[0] = testCard
[PASSED] Test 5 : Requested card to discard
[PASSED] Test 5 : supplyCound[testCard] = 0
[PASSED] Test 5 : handCount = 2
[PASSED] Test 5 : hand[0] = testCard
[PASSED] Unit Test: gainCard


[GO--->] Unit Test: cardEffect_Smithy
[FAILED] Test 1 : Handcount == 6
[FAILED] 6 expected, got 5
[PASSED] Test 1 : hand[0] == copper
[PASSED] Test 1 : hand[1] == silver
[PASSED] Test 1 : hand[2] == gold
[FAILED] Test 1 : hand[3] == great_hall
[FAILED] 16 expected, got 15
[FAILED] Test 1 : hand[5] == baron
[FAILED] 15 expected, got -1
[PASSED] Test 1 : hand[4] == curse
[FAILED] Unit Test: cardEffect_Smithy

[FAILED] 0 expected, got 1

[GO--->] Unit Test: test_cardAdventurer
[FAILED] Test 1 : handCount == 5
[FAILED] 5 expected, got 2
[PASSED] Test 1 : hand[0] == copper
[PASSED] Test 1 : hand[1] == silver
[PASSED] Test 1 : hand[2] == gold
[PASSED] Test 1 : hand[3] == adventurer
[FAILED] Test 1 : hand[5] == silver
[FAILED] 5 expected, got 0
[FAILED] Test 1 : hand[4] == gold
[FAILED] 6 expected, got 16
[FAILED] Unit Test: cardEftest_cardAdventurerfect_Smithy

[FAILED] 0 expected, got 1

[GO--->] Unit Test: test_cardCouncilRoom
[FAILED] Test 1 : numBuys++
[FAILED] 1 expected, got 0
[PASSED] Test 1 : handCount == 5
[PASSED] Test 1 : hand[0] == adventurer
[PASSED] Test 1 : hand[1] == 0
[PASSED] Test 1 : hand[2] == 3
[PASSED] Test 1 : hand[3] == 2
[PASSED] Test 1 : hand[4] == 1
[PASSED] Test 1 : handCount[player1] == 1
[PASSED] Test 1 : hand[player1][0] == 3
[PASSED] Test 1 : handCount[player2] == 1
[PASSED] Test 1 : hand[player2][0] == 3
[FAILED] Unit Test: test_cardCouncilRoom

[FAILED] 0 expected, got 1

[GO--->] Unit Test: test_cardFeast
That card is too expensive!
[PASSED] Test 1 : coins == 5
[PASSED] Test 1 : handCount[player] == 1
[PASSED] Test 1 : hand[player][0] == copper
[PASSED] Test 2 : handCount[player] == 1
[PASSED] Test 2 : hand[player][0] == copper
[PASSED] Test 3 : handCount[player] == 2
[PASSED] Test 3 : hand[player][0] == copper
[FAILED] Test 3 : hand[player][1] == duchy
[FAILED] 2 expected, got 0
[FAILED] Unit Test: test_cardFeast

[FAILED] 0 expected, got 1
File 'dominion.c'
Lines executed:14.98% of 554
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "cardEffects.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <math.h>
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:
    #####:    9:int compare(const void *a, const void *b) {
    #####:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
    #####:   12:  if (*(int *)a < *(int *)b)
    #####:   13:    return -1;
    #####:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame() {
    #####:   18:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:                  int k8, int k9, int k10) {
    #####:   24:  int *k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
    #####:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:                   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;
        -:   44:  // set up random number generator
    #####:   45:  SelectStream(1);
    #####:   46:  PutSeed((long)randomSeed);
        -:   47:
        -:   48:  // check number of players
    #####:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  // set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  // check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++) {
    #####:   58:    for (j = 0; j < 10; j++) {
    #####:   59:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
    #####:   60:        return -1;
        -:   61:      }
        -:   62:    }
        -:   63:  }
        -:   64:
        -:   65:  // initialize supply
        -:   66:  ///////////////////////////////
        -:   67:
        -:   68:  // set number of Curse cards
    #####:   69:  if (numPlayers == 2) {
    #####:   70:    state->supplyCount[curse] = 10;
    #####:   71:  } else if (numPlayers == 3) {
    #####:   72:    state->supplyCount[curse] = 20;
        -:   73:  } else {
    #####:   74:    state->supplyCount[curse] = 30;
        -:   75:  }
        -:   76:
        -:   77:  // set number of Victory cards
    #####:   78:  if (numPlayers == 2) {
    #####:   79:    state->supplyCount[estate] = 8;
    #####:   80:    state->supplyCount[duchy] = 8;
    #####:   81:    state->supplyCount[province] = 8;
        -:   82:  } else {
    #####:   83:    state->supplyCount[estate] = 12;
    #####:   84:    state->supplyCount[duchy] = 12;
    #####:   85:    state->supplyCount[province] = 12;
        -:   86:  }
        -:   87:
        -:   88:  // set number of Treasure cards
    #####:   89:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:   90:  state->supplyCount[silver] = 40;
    #####:   91:  state->supplyCount[gold] = 30;
        -:   92:
        -:   93:  // set number of Kingdom cards
    #####:   94:  for (i = adventurer; i <= treasure_map; i++) // loop all cards
        -:   95:  {
    #####:   96:    for (j = 0; j < 10; j++) // loop chosen cards
        -:   97:    {
    #####:   98:      if (kingdomCards[j] == i) {
        -:   99:        // check if card is a 'Victory' Kingdom card
    #####:  100:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
    #####:  101:          if (numPlayers == 2) {
    #####:  102:            state->supplyCount[i] = 8;
        -:  103:          } else {
    #####:  104:            state->supplyCount[i] = 12;
        -:  105:          }
        -:  106:        } else {
    #####:  107:          state->supplyCount[i] = 10;
        -:  108:        }
    #####:  109:        break;
        -:  110:      } else // card is not in the set choosen for the game
        -:  111:      {
    #####:  112:        state->supplyCount[i] = -1;
        -:  113:      }
        -:  114:    }
        -:  115:  }
        -:  116:
        -:  117:  ////////////////////////
        -:  118:  // supply intilization complete
        -:  119:
        -:  120:  // set player decks
    #####:  121:  for (i = 0; i < numPlayers; i++) {
    #####:  122:    state->deckCount[i] = 0;
    #####:  123:    for (j = 0; j < 3; j++) {
    #####:  124:      state->deck[i][j] = estate;
    #####:  125:      state->deckCount[i]++;
        -:  126:    }
    #####:  127:    for (j = 3; j < 10; j++) {
    #####:  128:      state->deck[i][j] = copper;
    #####:  129:      state->deckCount[i]++;
        -:  130:    }
        -:  131:  }
        -:  132:
        -:  133:  // shuffle player decks
    #####:  134:  for (i = 0; i < numPlayers; i++) {
    #####:  135:    if (shuffle(i, state) < 0) {
    #####:  136:      return -1;
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  // draw player hands
    #####:  141:  for (i = 0; i < numPlayers; i++) {
        -:  142:    // initialize hand size to zero
    #####:  143:    state->handCount[i] = 0;
    #####:  144:    state->discardCount[i] = 0;
        -:  145:    // draw 5 cards
        -:  146:    // for (j = 0; j < 5; j++)
        -:  147:    //	{
        -:  148:    //	  drawCard(i, state);
        -:  149:    //	}
        -:  150:  }
        -:  151:
        -:  152:  // set embargo tokens to 0 for all supply piles
    #####:  153:  for (i = 0; i <= treasure_map; i++) {
    #####:  154:    state->embargoTokens[i] = 0;
        -:  155:  }
        -:  156:
        -:  157:  // initialize first player's turn
    #####:  158:  state->outpostPlayed = 0;
    #####:  159:  state->phase = 0;
    #####:  160:  state->numActions = 1;
    #####:  161:  state->numBuys = 1;
    #####:  162:  state->playedCardCount = 0;
    #####:  163:  state->whoseTurn = 0;
    #####:  164:  state->handCount[state->whoseTurn] = 0;
        -:  165:  // int it; move to top
        -:  166:
        -:  167:  // Moved draw cards to here, only drawing at the start of a turn
    #####:  168:  for (it = 0; it < 5; it++) {
    #####:  169:    drawCard(state->whoseTurn, state);
        -:  170:  }
        -:  171:
    #####:  172:  updateCoins(state->whoseTurn, state, 0);
        -:  173:
    #####:  174:  return 0;
        -:  175:}
        -:  176:
      132:  177:int shuffle(int player, struct gameState *state) {
        -:  178:
        -:  179:  int newDeck[MAX_DECK];
      132:  180:  int newDeckPos = 0;
        -:  181:  int card;
        -:  182:  int i;
        -:  183:
      132:  184:  if (state->deckCount[player] < 1)
      131:  185:    return -1;
        1:  186:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int),
        -:  187:        compare);
        -:  188:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  189:
        3:  190:  while (state->deckCount[player] > 0) {
        1:  191:    card = floor(Random() * state->deckCount[player]);
        1:  192:    newDeck[newDeckPos] = state->deck[player][card];
        1:  193:    newDeckPos++;
        1:  194:    for (i = card; i < state->deckCount[player] - 1; i++) {
    #####:  195:      state->deck[player][i] = state->deck[player][i + 1];
        -:  196:    }
        1:  197:    state->deckCount[player]--;
        -:  198:  }
        2:  199:  for (i = 0; i < newDeckPos; i++) {
        1:  200:    state->deck[player][i] = newDeck[i];
        1:  201:    state->deckCount[player]++;
        -:  202:  }
        -:  203:
        1:  204:  return 0;
        -:  205:}
        -:  206:
    #####:  207:int playCard(int handPos, int choice1, int choice2, int choice3,
        -:  208:             struct gameState *state) {
        -:  209:  int card;
    #####:  210:  int coin_bonus = 0; // tracks coins gain from actions
        -:  211:
        -:  212:  // check if it is the right phase
    #####:  213:  if (state->phase != 0) {
    #####:  214:    return -1;
        -:  215:  }
        -:  216:
        -:  217:  // check if player has enough actions
    #####:  218:  if (state->numActions < 1) {
    #####:  219:    return -1;
        -:  220:  }
        -:  221:
        -:  222:  // get card played
    #####:  223:  card = handCard(handPos, state);
        -:  224:
        -:  225:  // check if selected card is an action
    #####:  226:  if (card < adventurer || card > treasure_map) {
    #####:  227:    return -1;
        -:  228:  }
        -:  229:
        -:  230:  // play card
    #####:  231:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) <
        -:  232:      0) {
    #####:  233:    return -1;
        -:  234:  }
        -:  235:
        -:  236:  // reduce number of actions
    #####:  237:  state->numActions--;
        -:  238:
        -:  239:  // update coins (Treasure cards may be added with card draws)
    #####:  240:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  241:
    #####:  242:  return 0;
        -:  243:}
        -:  244:
    #####:  245:int buyCard(int supplyPos, struct gameState *state) {
        -:  246:  int who;
        -:  247:  if (DEBUG) {
        -:  248:    printf("Entering buyCard...\n");
        -:  249:  }
        -:  250:
        -:  251:  // I don't know what to do about the phase thing.
        -:  252:
    #####:  253:  who = state->whoseTurn;
        -:  254:
    #####:  255:  if (state->numBuys < 1) {
        -:  256:    if (DEBUG)
        -:  257:      printf("You do not have any buys left\n");
    #####:  258:    return -1;
    #####:  259:  } else if (supplyCount(supplyPos, state) < 1) {
        -:  260:    if (DEBUG)
        -:  261:      printf("There are not any of that type of card left\n");
    #####:  262:    return -1;
    #####:  263:  } else if (state->coins < getCost(supplyPos)) {
        -:  264:    if (DEBUG)
        -:  265:      printf("You do not have enough money to buy that. You have %d coins.\n",
        -:  266:             state->coins);
    #####:  267:    return -1;
        -:  268:  } else {
    #####:  269:    state->phase = 1;
        -:  270:    // state->supplyCount[supplyPos]--;
    #####:  271:    gainCard(supplyPos, state, 0, who); // card goes in discard, this might be
        -:  272:                                        // wrong.. (2 means goes into hand, 0
        -:  273:                                        // goes into discard)
        -:  274:
    #####:  275:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  276:    state->numBuys--;
        -:  277:    if (DEBUG)
        -:  278:      printf("You bought card number %d for %d coins. You now have %d buys and "
        -:  279:             "%d coins.\n",
        -:  280:             supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  281:  }
        -:  282:
        -:  283:  // state->discard[who][state->discardCount[who]] = supplyPos;
        -:  284:  // state->discardCount[who]++;
        -:  285:
    #####:  286:  return 0;
        -:  287:}
        -:  288:
    #####:  289:int numHandCards(struct gameState *state) {
    #####:  290:  return state->handCount[whoseTurn(state)];
        -:  291:}
        -:  292:
    #####:  293:int handCard(int handPos, struct gameState *state) {
    #####:  294:  int currentPlayer = whoseTurn(state);
    #####:  295:  return state->hand[currentPlayer][handPos];
        -:  296:}
        -:  297:
       12:  298:int supplyCount(int card, struct gameState *state) {
       12:  299:  return state->supplyCount[card];
        -:  300:}
        -:  301:
    #####:  302:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  303:  int i;
    #####:  304:  int count = 0;
        -:  305:
    #####:  306:  for (i = 0; i < state->deckCount[player]; i++) {
    #####:  307:    if (state->deck[player][i] == card)
    #####:  308:      count++;
        -:  309:  }
        -:  310:
    #####:  311:  for (i = 0; i < state->handCount[player]; i++) {
    #####:  312:    if (state->hand[player][i] == card)
    #####:  313:      count++;
        -:  314:  }
        -:  315:
    #####:  316:  for (i = 0; i < state->discardCount[player]; i++) {
    #####:  317:    if (state->discard[player][i] == card)
    #####:  318:      count++;
        -:  319:  }
        -:  320:
    #####:  321:  return count;
        -:  322:}
        -:  323:
    #####:  324:int whoseTurn(struct gameState *state) { return state->whoseTurn; }
        -:  325:
    #####:  326:int endTurn(struct gameState *state) {
        -:  327:  int k;
        -:  328:  int i;
    #####:  329:  int currentPlayer = whoseTurn(state);
        -:  330:
        -:  331:  // Discard hand
    #####:  332:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  333:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####:  334:        state->hand[currentPlayer][i];  // Discard
    #####:  335:    state->hand[currentPlayer][i] = -1; // Set card to -1
        -:  336:  }
    #####:  337:  state->handCount[currentPlayer] = 0; // Reset hand count
        -:  338:
        -:  339:  // Code for determining the player
    #####:  340:  if (currentPlayer < (state->numPlayers - 1)) {
    #####:  341:    state->whoseTurn = currentPlayer + 1; // Still safe to increment
        -:  342:  } else {
    #####:  343:    state->whoseTurn =
        -:  344:        0; // Max player has been reached, loop back around to player 1
        -:  345:  }
        -:  346:
    #####:  347:  state->outpostPlayed = 0;
    #####:  348:  state->phase = 0;
    #####:  349:  state->numActions = 1;
    #####:  350:  state->coins = 0;
    #####:  351:  state->numBuys = 1;
    #####:  352:  state->playedCardCount = 0;
    #####:  353:  state->handCount[state->whoseTurn] = 0;
        -:  354:
        -:  355:  // int k; move to top
        -:  356:  // Next player draws hand
    #####:  357:  for (k = 0; k < 5; k++) {
    #####:  358:    drawCard(state->whoseTurn, state); // Draw a card
        -:  359:  }
        -:  360:
        -:  361:  // Update money
    #####:  362:  updateCoins(state->whoseTurn, state, 0);
        -:  363:
    #####:  364:  return 0;
        -:  365:}
        -:  366:
    #####:  367:int isGameOver(struct gameState *state) {
        -:  368:  int i;
        -:  369:  int j;
        -:  370:
        -:  371:  // if stack of Province cards is empty, the game ends
    #####:  372:  if (state->supplyCount[province] == 0) {
    #####:  373:    return 1;
        -:  374:  }
        -:  375:
        -:  376:  // if three supply pile are at 0, the game ends
    #####:  377:  j = 0;
    #####:  378:  for (i = 0; i < 25; i++) {
    #####:  379:    if (state->supplyCount[i] == 0) {
    #####:  380:      j++;
        -:  381:    }
        -:  382:  }
    #####:  383:  if (j >= 3) {
    #####:  384:    return 1;
        -:  385:  }
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int scoreFor(int player, struct gameState *state) {
        -:  391:
        -:  392:  int i;
    #####:  393:  int score = 0;
        -:  394:  // score from hand
    #####:  395:  for (i = 0; i < state->handCount[player]; i++) {
    #####:  396:    if (state->hand[player][i] == curse) {
    #####:  397:      score = score - 1;
        -:  398:    };
    #####:  399:    if (state->hand[player][i] == estate) {
    #####:  400:      score = score + 1;
        -:  401:    };
    #####:  402:    if (state->hand[player][i] == duchy) {
    #####:  403:      score = score + 3;
        -:  404:    };
    #####:  405:    if (state->hand[player][i] == province) {
    #####:  406:      score = score + 6;
        -:  407:    };
    #####:  408:    if (state->hand[player][i] == great_hall) {
    #####:  409:      score = score + 1;
        -:  410:    };
    #####:  411:    if (state->hand[player][i] == gardens) {
    #####:  412:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  413:    };
        -:  414:  }
        -:  415:
        -:  416:  // score from discard
    #####:  417:  for (i = 0; i < state->discardCount[player]; i++) {
    #####:  418:    if (state->discard[player][i] == curse) {
    #####:  419:      score = score - 1;
        -:  420:    };
    #####:  421:    if (state->discard[player][i] == estate) {
    #####:  422:      score = score + 1;
        -:  423:    };
    #####:  424:    if (state->discard[player][i] == duchy) {
    #####:  425:      score = score + 3;
        -:  426:    };
    #####:  427:    if (state->discard[player][i] == province) {
    #####:  428:      score = score + 6;
        -:  429:    };
    #####:  430:    if (state->discard[player][i] == great_hall) {
    #####:  431:      score = score + 1;
        -:  432:    };
    #####:  433:    if (state->discard[player][i] == gardens) {
    #####:  434:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  435:    };
        -:  436:  }
        -:  437:
        -:  438:  // score from deck
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++) {
    #####:  440:    if (state->deck[player][i] == curse) {
    #####:  441:      score = score - 1;
        -:  442:    };
    #####:  443:    if (state->deck[player][i] == estate) {
    #####:  444:      score = score + 1;
        -:  445:    };
    #####:  446:    if (state->deck[player][i] == duchy) {
    #####:  447:      score = score + 3;
        -:  448:    };
    #####:  449:    if (state->deck[player][i] == province) {
    #####:  450:      score = score + 6;
        -:  451:    };
    #####:  452:    if (state->deck[player][i] == great_hall) {
    #####:  453:      score = score + 1;
        -:  454:    };
    #####:  455:    if (state->deck[player][i] == gardens) {
    #####:  456:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  457:    };
        -:  458:  }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  // get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++) {
        -:  471:    // set unused player scores to -9999
    #####:  472:    if (i >= state->numPlayers) {
    #####:  473:      players[i] = -9999;
        -:  474:    } else {
    #####:  475:      players[i] = scoreFor(i, state);
        -:  476:    }
        -:  477:  }
        -:  478:
        -:  479:  // find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  482:    if (players[i] > players[j]) {
    #####:  483:      j = i;
        -:  484:    }
        -:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  // add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  491:    if (players[i] == highScore && i > currentPlayer) {
    #####:  492:      players[i]++;
        -:  493:    }
        -:  494:  }
        -:  495:
        -:  496:  // find new highest score
    #####:  497:  j = 0;
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  499:    if (players[i] > players[j]) {
    #####:  500:      j = i;
        -:  501:    }
        -:  502:  }
    #####:  503:  highScore = players[j];
        -:  504:
        -:  505:  // set winners in array to 1 and rest to 0
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  507:    if (players[i] == highScore) {
    #####:  508:      players[i] = 1;
        -:  509:    } else {
    #####:  510:      players[i] = 0;
        -:  511:    }
        -:  512:  }
        -:  513:
    #####:  514:  return 0;
        -:  515:}
        -:  516:
       82:  517:int drawCard(int player, struct gameState *state) {
        -:  518:  int count;
        -:  519:  int deckCounter;
       82:  520:  if (state->deckCount[player] <= 0) { // Deck is empty
        -:  521:
        -:  522:    // Step 1 Shuffle the discard pile back into a deck
        -:  523:    int i;
        -:  524:    // Move discard to deck
       68:  525:    for (i = 0; i < state->discardCount[player]; i++) {
        1:  526:      state->deck[player][i] = state->discard[player][i];
        1:  527:      state->discard[player][i] = -1;
        -:  528:    }
        -:  529:
       67:  530:    state->deckCount[player] = state->discardCount[player];
       67:  531:    state->discardCount[player] = 0; // Reset discard
        -:  532:
        -:  533:    // Shufffle the deck
       67:  534:    shuffle(player,
        -:  535:            state); // Shuffle the deck up and make it so that we can draw
        -:  536:
        -:  537:    if (DEBUG) { // Debug statements
        -:  538:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  539:    }
        -:  540:
       67:  541:    state->discardCount[player] = 0;
        -:  542:
        -:  543:    // Step 2 Draw Card
       67:  544:    count = state->handCount[player]; // Get current player's hand count
        -:  545:
        -:  546:    if (DEBUG) { // Debug statements
        -:  547:      printf("Current hand count: %d\n", count);
        -:  548:    }
        -:  549:
       67:  550:    deckCounter = state->deckCount[player]; // Create a holder for the deck
        -:  551:                                            // count
        -:  552:
       67:  553:    if (deckCounter == 0)
       66:  554:      return -1;
        -:  555:
        1:  556:    state->hand[player][count] =
        1:  557:        state->deck[player][deckCounter - 1]; // Add card to hand
        1:  558:    state->deckCount[player]--;
        1:  559:    state->handCount[player]++; // Increment hand count
        -:  560:  }
        -:  561:
        -:  562:  else {
       15:  563:    int count = state->handCount[player]; // Get current hand count for player
        -:  564:    int deckCounter;
        -:  565:    if (DEBUG) { // Debug statements
        -:  566:      printf("Current hand count: %d\n", count);
        -:  567:    }
        -:  568:
       15:  569:    deckCounter = state->deckCount[player]; // Create holder for the deck count
       15:  570:    state->hand[player][count] =
       15:  571:        state->deck[player][deckCounter - 1]; // Add card to the hand
       15:  572:    state->deckCount[player]--;
       15:  573:    state->handCount[player]++; // Increment hand count
        -:  574:  }
        -:  575:
       16:  576:  return 0;
        -:  577:}
        -:  578:
        2:  579:int getCost(int cardNumber) {
        2:  580:  switch (cardNumber) {
        -:  581:  case curse:
    #####:  582:    return 0;
        -:  583:  case estate:
    #####:  584:    return 2;
        -:  585:  case duchy:
        1:  586:    return 5;
        -:  587:  case province:
        1:  588:    return 8;
        -:  589:  case copper:
    #####:  590:    return 0;
        -:  591:  case silver:
    #####:  592:    return 3;
        -:  593:  case gold:
    #####:  594:    return 6;
        -:  595:  case adventurer:
    #####:  596:    return 6;
        -:  597:  case council_room:
    #####:  598:    return 5;
        -:  599:  case feast:
    #####:  600:    return 4;
        -:  601:  case gardens:
    #####:  602:    return 4;
        -:  603:  case mine:
    #####:  604:    return 5;
        -:  605:  case remodel:
    #####:  606:    return 4;
        -:  607:  case smithy:
    #####:  608:    return 4;
        -:  609:  case village:
    #####:  610:    return 3;
        -:  611:  case baron:
    #####:  612:    return 4;
        -:  613:  case great_hall:
    #####:  614:    return 3;
        -:  615:  case minion:
    #####:  616:    return 5;
        -:  617:  case steward:
    #####:  618:    return 3;
        -:  619:  case tribute:
    #####:  620:    return 5;
        -:  621:  case ambassador:
    #####:  622:    return 3;
        -:  623:  case cutpurse:
    #####:  624:    return 4;
        -:  625:  case embargo:
    #####:  626:    return 2;
        -:  627:  case outpost:
    #####:  628:    return 5;
        -:  629:  case salvager:
    #####:  630:    return 4;
        -:  631:  case sea_hag:
    #####:  632:    return 4;
        -:  633:  case treasure_map:
    #####:  634:    return 4;
        -:  635:  }
        -:  636:
    #####:  637:  return -1;
        -:  638:}
        -:  639:
    #####:  640:int cardEffect(int card, int choice1, int choice2, int choice3,
        -:  641:               struct gameState *state, int handPos, int *bonus) {
        -:  642:  int i;
        -:  643:  int j;
        -:  644:  int k;
        -:  645:  int x;
        -:  646:  int index;
    #####:  647:  int currentPlayer = whoseTurn(state);
    #####:  648:  int nextPlayer = currentPlayer + 1;
        -:  649:
    #####:  650:  int tributeRevealedCards[2] = {-1, -1};
        -:  651:  int temphand[MAX_HAND]; // moved above the if statement
    #####:  652:  int drawntreasure = 0;
        -:  653:  int cardDrawn;
    #####:  654:  int z = 0; // this is the counter for the temp hand
    #####:  655:  if (nextPlayer > (state->numPlayers - 1)) {
    #####:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:
        -:  659:  // uses switch to select card and perform actions
    #####:  660:  switch (card) {
        -:  661:  case adventurer:
    #####:  662:    return cardEffect_Adventurer(&drawntreasure, state, &currentPlayer,
        -:  663:                                 &cardDrawn, temphand, &z);
        -:  664:
        -:  665:  case council_room:
    #####:  666:    return cardEffect_CouncilRoom(&currentPlayer, state, &handPos);
        -:  667:
        -:  668:  case feast:
    #####:  669:    return cardEffect_Feast(&currentPlayer, state, &handPos, temphand,
        -:  670:                            &choice1, &x);
        -:  671:
        -:  672:  case gardens:
    #####:  673:    return -1;
        -:  674:
        -:  675:  case mine:
    #####:  676:    j = state->hand[currentPlayer][choice1]; // store card we will trash
        -:  677:
    #####:  678:    if (state->hand[currentPlayer][choice1] < copper ||
    #####:  679:        state->hand[currentPlayer][choice1] > gold) {
    #####:  680:      return -1;
        -:  681:    }
        -:  682:
    #####:  683:    if (choice2 > treasure_map || choice2 < curse) {
    #####:  684:      return -1;
        -:  685:    }
        -:  686:
    #####:  687:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
    #####:  688:      return -1;
        -:  689:    }
        -:  690:
    #####:  691:    gainCard(choice2, state, 2, currentPlayer);
        -:  692:
        -:  693:    // discard card from hand
    #####:  694:    discardCard(handPos, currentPlayer, state, 0);
        -:  695:
        -:  696:    // discard trashed card
    #####:  697:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  698:      if (state->hand[currentPlayer][i] == j) {
    #####:  699:        discardCard(i, currentPlayer, state, 0);
    #####:  700:        break;
        -:  701:      }
        -:  702:    }
        -:  703:
    #####:  704:    return 0;
        -:  705:
        -:  706:  case remodel:
    #####:  707:    j = state->hand[currentPlayer][choice1]; // store card we will trash
        -:  708:
    #####:  709:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2)) {
    #####:  710:      return -1;
        -:  711:    }
        -:  712:
    #####:  713:    gainCard(choice2, state, 0, currentPlayer);
        -:  714:
        -:  715:    // discard card from hand
    #####:  716:    discardCard(handPos, currentPlayer, state, 0);
        -:  717:
        -:  718:    // discard trashed card
    #####:  719:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  720:      if (state->hand[currentPlayer][i] == j) {
    #####:  721:        discardCard(i, currentPlayer, state, 0);
    #####:  722:        break;
        -:  723:      }
        -:  724:    }
        -:  725:
    #####:  726:    return 0;
        -:  727:
        -:  728:  case smithy:
    #####:  729:    return cardEffect_Smithy(&currentPlayer, state, &handPos);
        -:  730:
        -:  731:  case village:
        -:  732:    //+1 Card
    #####:  733:    drawCard(currentPlayer, state);
        -:  734:
        -:  735:    //+2 Actions
    #####:  736:    state->numActions = state->numActions + 2;
        -:  737:
        -:  738:    // discard played card from hand
    #####:  739:    discardCard(handPos, currentPlayer, state, 0);
    #####:  740:    return 0;
        -:  741:
        -:  742:  case baron:
    #####:  743:    state->numBuys++;             // Increase buys by 1!
    #####:  744:    if (choice1 > 0) {            // Boolean true or going to discard an estate
    #####:  745:      int p = 0;                  // Iterator for hand!
    #####:  746:      int card_not_discarded = 1; // Flag for discard set!
    #####:  747:      while (card_not_discarded) {
    #####:  748:        if (state->hand[currentPlayer][p] == estate) { // Found an estate card!
    #####:  749:          state->coins += 4; // Add 4 coins to the amount of coins
    #####:  750:          state->discard[currentPlayer][state->discardCount[currentPlayer]] =
    #####:  751:              state->hand[currentPlayer][p];
    #####:  752:          state->discardCount[currentPlayer]++;
    #####:  753:          for (; p < state->handCount[currentPlayer]; p++) {
    #####:  754:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  755:          }
    #####:  756:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  757:          state->handCount[currentPlayer]--;
    #####:  758:          card_not_discarded = 0; // Exit the loop
    #####:  759:        } else if (p > state->handCount[currentPlayer]) {
        -:  760:          if (DEBUG) {
        -:  761:            printf("No estate cards in your hand, invalid choice\n");
        -:  762:            printf("Must gain an estate if there are any\n");
        -:  763:          }
    #####:  764:          if (supplyCount(estate, state) > 0) {
    #####:  765:            gainCard(estate, state, 0, currentPlayer);
    #####:  766:            state->supplyCount[estate]--; // Decrement estates
    #####:  767:            if (supplyCount(estate, state) == 0) {
    #####:  768:              isGameOver(state);
        -:  769:            }
        -:  770:          }
    #####:  771:          card_not_discarded = 0; // Exit the loop
        -:  772:        }
        -:  773:
        -:  774:        else {
    #####:  775:          p++; // Next card
        -:  776:        }
        -:  777:      }
        -:  778:    }
        -:  779:
        -:  780:    else {
    #####:  781:      if (supplyCount(estate, state) > 0) {
    #####:  782:        gainCard(estate, state, 0, currentPlayer); // Gain an estate
    #####:  783:        state->supplyCount[estate]--;              // Decrement Estates
    #####:  784:        if (supplyCount(estate, state) == 0) {
    #####:  785:          isGameOver(state);
        -:  786:        }
        -:  787:      }
        -:  788:    }
        -:  789:
    #####:  790:    return 0;
        -:  791:
        -:  792:  case great_hall:
        -:  793:    //+1 Card
    #####:  794:    drawCard(currentPlayer, state);
        -:  795:
        -:  796:    //+1 Actions
    #####:  797:    state->numActions++;
        -:  798:
        -:  799:    // discard card from hand
    #####:  800:    discardCard(handPos, currentPlayer, state, 0);
    #####:  801:    return 0;
        -:  802:
        -:  803:  case minion:
        -:  804:    //+1 action
    #####:  805:    state->numActions++;
        -:  806:
        -:  807:    // discard card from hand
    #####:  808:    discardCard(handPos, currentPlayer, state, 0);
        -:  809:
    #####:  810:    if (choice1) //+2 coins
        -:  811:    {
    #####:  812:      state->coins = state->coins + 2;
        -:  813:    }
        -:  814:
    #####:  815:    else if (choice2) // discard hand, redraw 4, other players with 5+ cards
        -:  816:                      // discard hand and draw 4
        -:  817:    {
        -:  818:      // discard hand
    #####:  819:      while (numHandCards(state) > 0) {
    #####:  820:        discardCard(handPos, currentPlayer, state, 0);
        -:  821:      }
        -:  822:
        -:  823:      // draw 4
    #####:  824:      for (i = 0; i < 4; i++) {
    #####:  825:        drawCard(currentPlayer, state);
        -:  826:      }
        -:  827:
        -:  828:      // other players discard hand and redraw if hand size > 4
    #####:  829:      for (i = 0; i < state->numPlayers; i++) {
    #####:  830:        if (i != currentPlayer) {
    #####:  831:          if (state->handCount[i] > 4) {
        -:  832:            // discard hand
    #####:  833:            while (state->handCount[i] > 0) {
    #####:  834:              discardCard(handPos, i, state, 0);
        -:  835:            }
        -:  836:
        -:  837:            // draw 4
    #####:  838:            for (j = 0; j < 4; j++) {
    #####:  839:              drawCard(i, state);
        -:  840:            }
        -:  841:          }
        -:  842:        }
        -:  843:      }
        -:  844:    }
    #####:  845:    return 0;
        -:  846:
        -:  847:  case steward:
    #####:  848:    if (choice1 == 1) {
        -:  849:      //+2 cards
    #####:  850:      drawCard(currentPlayer, state);
    #####:  851:      drawCard(currentPlayer, state);
    #####:  852:    } else if (choice1 == 2) {
        -:  853:      //+2 coins
    #####:  854:      state->coins = state->coins + 2;
        -:  855:    } else {
        -:  856:      // trash 2 cards in hand
    #####:  857:      discardCard(choice2, currentPlayer, state, 1);
    #####:  858:      discardCard(choice3, currentPlayer, state, 1);
        -:  859:    }
        -:  860:
        -:  861:    // discard card from hand
    #####:  862:    discardCard(handPos, currentPlayer, state, 0);
    #####:  863:    return 0;
        -:  864:
        -:  865:  case tribute:
    #####:  866:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####:  867:      if (state->deckCount[nextPlayer] > 0) {
    #####:  868:        tributeRevealedCards[0] =
    #####:  869:            state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  870:        state->deckCount[nextPlayer]--;
    #####:  871:      } else if (state->discardCount[nextPlayer] > 0) {
    #####:  872:        tributeRevealedCards[0] =
    #####:  873:            state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  874:        state->discardCount[nextPlayer]--;
        -:  875:      } else {
        -:  876:        // No Card to Reveal
        -:  877:        if (DEBUG) {
        -:  878:          printf("No cards to reveal\n");
        -:  879:        }
        -:  880:      }
        -:  881:    }
        -:  882:
        -:  883:    else {
    #####:  884:      if (state->deckCount[nextPlayer] == 0) {
    #####:  885:        for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####:  886:          state->deck[nextPlayer][i] =
    #####:  887:              state->discard[nextPlayer][i]; // Move to deck
    #####:  888:          state->deckCount[nextPlayer]++;
    #####:  889:          state->discard[nextPlayer][i] = -1;
    #####:  890:          state->discardCount[nextPlayer]--;
        -:  891:        }
        -:  892:
    #####:  893:        shuffle(nextPlayer, state); // Shuffle the deck
        -:  894:      }
    #####:  895:      tributeRevealedCards[0] =
    #####:  896:          state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  897:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  898:      state->deckCount[nextPlayer]--;
    #####:  899:      tributeRevealedCards[1] =
    #####:  900:          state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  901:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  902:      state->deckCount[nextPlayer]--;
        -:  903:    }
        -:  904:
    #####:  905:    if (tributeRevealedCards[0] ==
    #####:  906:        tributeRevealedCards[1]) { // If we have a duplicate card, just drop one
    #####:  907:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  908:      state->playedCardCount++;
    #####:  909:      tributeRevealedCards[1] = -1;
        -:  910:    }
        -:  911:
    #####:  912:    for (i = 0; i <= 2; i++) {
    #####:  913:      if (tributeRevealedCards[i] == copper ||
    #####:  914:          tributeRevealedCards[i] == silver ||
    #####:  915:          tributeRevealedCards[i] == gold) { // Treasure cards
    #####:  916:        state->coins += 2;
        -:  917:      }
        -:  918:
    #####:  919:      else if (tributeRevealedCards[i] == estate ||
    #####:  920:               tributeRevealedCards[i] == duchy ||
    #####:  921:               tributeRevealedCards[i] == province ||
    #####:  922:               tributeRevealedCards[i] == gardens ||
    #####:  923:               tributeRevealedCards[i] == great_hall) { // Victory Card Found
    #####:  924:        drawCard(currentPlayer, state);
    #####:  925:        drawCard(currentPlayer, state);
        -:  926:      } else { // Action Card
    #####:  927:        state->numActions = state->numActions + 2;
        -:  928:      }
        -:  929:    }
        -:  930:
    #####:  931:    return 0;
        -:  932:
        -:  933:  case ambassador:
    #####:  934:    j = 0; // used to check if player has enough cards to discard
        -:  935:
    #####:  936:    if (choice2 > 2 || choice2 < 0) {
    #####:  937:      return -1;
        -:  938:    }
        -:  939:
    #####:  940:    if (choice1 == handPos) {
    #####:  941:      return -1;
        -:  942:    }
        -:  943:
    #####:  944:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  945:      if (i != handPos && i == state->hand[currentPlayer][choice1] &&
    #####:  946:          i != choice1) {
    #####:  947:        j++;
        -:  948:      }
        -:  949:    }
    #####:  950:    if (j < choice2) {
    #####:  951:      return -1;
        -:  952:    }
        -:  953:
        -:  954:    if (DEBUG)
        -:  955:      printf("Player %d reveals card number: %d\n", currentPlayer,
        -:  956:             state->hand[currentPlayer][choice1]);
        -:  957:
        -:  958:    // increase supply count for choosen card by amount being discarded
    #####:  959:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  960:
        -:  961:    // each other player gains a copy of revealed card
    #####:  962:    for (i = 0; i < state->numPlayers; i++) {
    #####:  963:      if (i != currentPlayer) {
    #####:  964:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  965:      }
        -:  966:    }
        -:  967:
        -:  968:    // discard played card from hand
    #####:  969:    discardCard(handPos, currentPlayer, state, 0);
        -:  970:
        -:  971:    // trash copies of cards returned to supply
    #####:  972:    for (j = 0; j < choice2; j++) {
    #####:  973:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  974:        if (state->hand[currentPlayer][i] ==
    #####:  975:            state->hand[currentPlayer][choice1]) {
    #####:  976:          discardCard(i, currentPlayer, state, 1);
    #####:  977:          break;
        -:  978:        }
        -:  979:      }
        -:  980:    }
        -:  981:
    #####:  982:    return 0;
        -:  983:
        -:  984:  case cutpurse:
        -:  985:
    #####:  986:    updateCoins(currentPlayer, state, 2);
    #####:  987:    for (i = 0; i < state->numPlayers; i++) {
    #####:  988:      if (i != currentPlayer) {
    #####:  989:        for (j = 0; j < state->handCount[i]; j++) {
    #####:  990:          if (state->hand[i][j] == copper) {
    #####:  991:            discardCard(j, i, state, 0);
    #####:  992:            break;
        -:  993:          }
    #####:  994:          if (j == state->handCount[i]) {
    #####:  995:            for (k = 0; k < state->handCount[i]; k++) {
        -:  996:              if (DEBUG)
        -:  997:                printf("Player %d reveals card number %d\n", i,
        -:  998:                       state->hand[i][k]);
        -:  999:            }
    #####: 1000:            break;
        -: 1001:          }
        -: 1002:        }
        -: 1003:      }
        -: 1004:    }
        -: 1005:
        -: 1006:    // discard played card from hand
    #####: 1007:    discardCard(handPos, currentPlayer, state, 0);
        -: 1008:
    #####: 1009:    return 0;
        -: 1010:
        -: 1011:  case embargo:
        -: 1012:    //+2 Coins
    #####: 1013:    state->coins = state->coins + 2;
        -: 1014:
        -: 1015:    // see if selected pile is in play
    #####: 1016:    if (state->supplyCount[choice1] == -1) {
    #####: 1017:      return -1;
        -: 1018:    }
        -: 1019:
        -: 1020:    // add embargo token to selected supply pile
    #####: 1021:    state->embargoTokens[choice1]++;
        -: 1022:
        -: 1023:    // trash card
    #####: 1024:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1025:    return 0;
        -: 1026:
        -: 1027:  case outpost:
        -: 1028:    // set outpost flag
    #####: 1029:    state->outpostPlayed++;
        -: 1030:
        -: 1031:    // discard card
    #####: 1032:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1033:    return 0;
        -: 1034:
        -: 1035:  case salvager:
        -: 1036:    //+1 buy
    #####: 1037:    state->numBuys++;
        -: 1038:
    #####: 1039:    if (choice1) {
        -: 1040:      // gain coins equal to trashed card
    #####: 1041:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1042:      // trash card
    #####: 1043:      discardCard(choice1, currentPlayer, state, 1);
        -: 1044:    }
        -: 1045:
        -: 1046:    // discard card
    #####: 1047:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1048:    return 0;
        -: 1049:
        -: 1050:  case sea_hag:
    #####: 1051:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1052:      if (i != currentPlayer) {
    #####: 1053:        state->discard[i][state->discardCount[i]] =
    #####: 1054:            state->deck[i][state->deckCount[i]--];
    #####: 1055:        state->deckCount[i]--;
    #####: 1056:        state->discardCount[i]++;
    #####: 1057:        state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse
        -: 1058:      }
        -: 1059:    }
    #####: 1060:    return 0;
        -: 1061:
        -: 1062:  case treasure_map:
        -: 1063:    // search hand for another treasure_map
    #####: 1064:    index = -1;
    #####: 1065:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1066:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
    #####: 1067:        index = i;
    #####: 1068:        break;
        -: 1069:      }
        -: 1070:    }
    #####: 1071:    if (index > -1) {
        -: 1072:      // trash both treasure cards
    #####: 1073:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1074:      discardCard(index, currentPlayer, state, 1);
        -: 1075:
        -: 1076:      // gain 4 Gold cards
    #####: 1077:      for (i = 0; i < 4; i++) {
    #####: 1078:        gainCard(gold, state, 1, currentPlayer);
        -: 1079:      }
        -: 1080:
        -: 1081:      // return success
    #####: 1082:      return 1;
        -: 1083:    }
        -: 1084:
        -: 1085:    // no second treasure_map found in hand
    #####: 1086:    return -1;
        -: 1087:  }
        -: 1088:
    #####: 1089:  return -1;
        -: 1090:}
        -: 1091:
        6: 1092:int discardCard(int handPos, int currentPlayer, struct gameState *state,
        -: 1093:                int trashFlag) {
        -: 1094:
        -: 1095:  // if card is not trashed, added to Played pile
        6: 1096:  if (trashFlag < 1) {
        -: 1097:    // add card to played pile
        6: 1098:    state->playedCards[state->playedCardCount] =
        3: 1099:        state->hand[currentPlayer][handPos];
        3: 1100:    state->playedCardCount++;
        -: 1101:  }
        -: 1102:
        -: 1103:  // set played card to -1
        6: 1104:  state->hand[currentPlayer][handPos] = -1;
        -: 1105:
        -: 1106:  // remove card from player's hand
        6: 1107:  if (handPos == (state->handCount[currentPlayer] -
        -: 1108:                  1)) // last card in hand array is played
        -: 1109:  {
        -: 1110:    // reduce number of cards in hand
        3: 1111:    state->handCount[currentPlayer]--;
        3: 1112:  } else if (state->handCount[currentPlayer] == 1) // only one card in hand
        -: 1113:  {
        -: 1114:    // reduce number of cards in hand
    #####: 1115:    state->handCount[currentPlayer]--;
        -: 1116:  } else {
        -: 1117:    // replace discarded card with last card in hand
        3: 1118:    state->hand[currentPlayer][handPos] =
        3: 1119:        state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1120:    // set last card to -1
        3: 1121:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1122:    // reduce number of cards in hand
        3: 1123:    state->handCount[currentPlayer]--;
        -: 1124:  }
        -: 1125:
        6: 1126:  return 0;
        -: 1127:}
        -: 1128:
        9: 1129:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1130:  // Note: supplyPos is enum of choosen card
        -: 1131:
        -: 1132:  // check if supply pile is empty (0) or card is not used in game (-1)
        9: 1133:  if (supplyCount(supplyPos, state) < 1) {
        2: 1134:    return -1;
        -: 1135:  }
        -: 1136:
        -: 1137:  // added card for [whoseTurn] current player:
        -: 1138:  // toFlag = 0 : add to discard
        -: 1139:  // toFlag = 1 : add to deck
        -: 1140:  // toFlag = 2 : add to hand
        -: 1141:
        7: 1142:  if (toFlag == 1) {
        2: 1143:    state->deck[player][state->deckCount[player]] = supplyPos;
        2: 1144:    state->deckCount[player]++;
        5: 1145:  } else if (toFlag == 2) {
        3: 1146:    state->hand[player][state->handCount[player]] = supplyPos;
        3: 1147:    state->handCount[player]++;
        -: 1148:  } else {
        2: 1149:    state->discard[player][state->discardCount[player]] = supplyPos;
        2: 1150:    state->discardCount[player]++;
        -: 1151:  }
        -: 1152:
        -: 1153:  // decrease number in supply pile
        7: 1154:  state->supplyCount[supplyPos]--;
        -: 1155:
        7: 1156:  return 0;
        -: 1157:}
        -: 1158:
        7: 1159:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1160:  int i;
        -: 1161:
        -: 1162:  // reset coin count
        7: 1163:  state->coins = 0;
        -: 1164:
        -: 1165:  // add coins for each Treasure card in player's hand
       19: 1166:  for (i = 0; i < state->handCount[player]; i++) {
       12: 1167:    if (state->hand[player][i] == copper) {
        3: 1168:      state->coins += 1;
        9: 1169:    } else if (state->hand[player][i] == silver) {
        3: 1170:      state->coins += 2;
        6: 1171:    } else if (state->hand[player][i] == gold) {
        3: 1172:      state->coins += 3;
        -: 1173:    }
        -: 1174:  }
        -: 1175:
        -: 1176:  // add bonus
        7: 1177:  state->coins += bonus;
        -: 1178:
        7: 1179:  return 0;
        -: 1180:}
        -: 1181:
        -: 1182:// end of dominion.c
File 'cardEffects.c'
Lines executed:74.24% of 66
Creating 'cardEffects.c.gcov'

        -:    0:Source:cardEffects.c
        -:    0:Graph:cardEffects.gcno
        -:    0:Data:cardEffects.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "cardEffects.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int cardEffect_Adventurer(int *drawntreasure, struct gameState *state,
        -:    6:                          int *currentPlayer, int *cardDrawn, int *temphand,
        -:    7:                          int *z) {
       72:    8:  while (*drawntreasure < 2) {
       70:    9:    if (state->deckCount[*currentPlayer] < 1) { // if the deck is empty we need
        -:   10:                                                // to shuffle discard and add
        -:   11:                                                // to deck
       65:   12:      shuffle(*currentPlayer, state);
        -:   13:    }
       70:   14:    drawCard(*currentPlayer, state);
       70:   15:    *cardDrawn =
       70:   16:        state->hand[*currentPlayer]
        -:   17:                   //[state->handCount[*currentPlayer] - 1]; // top card of hand is most recently drawn card.
        -:   18:                   // Error 1 : Remove index offset (-1)
       70:   19:                   [state->handCount[*currentPlayer]]; // top card of hand is most recently drawn card.
       70:   20:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
       63:   21:      drawntreasure++;
        -:   22:    else {
        7:   23:      temphand[*z] = *cardDrawn;
        7:   24:      state->handCount[*currentPlayer]--; // this should just remove the top
        -:   25:                                          // card (the most recently drawn
        -:   26:                                          // one).
        7:   27:      (*z)++;
        -:   28:    }
        -:   29:  }
        9:   30:  while (*z - 1 >= 0) {
       14:   31:    state->discard[*currentPlayer][state->discardCount[*currentPlayer]++] =
        7:   32:        temphand[*z - 1]; // discard all cards in play that have been drawn
        7:   33:    *z = *z - 1;
        -:   34:  }
        1:   35:  return 0;
        -:   36:}
        -:   37:
        1:   38:int cardEffect_Smithy(int *currentPlayer, struct gameState *state,
        -:   39:                      int *handPos) {
        -:   40:  int i;
        -:   41:  //+3 Cards
        -:   42:  //for (i = 0; i < 3; i++) {
        -:   43:  // Error 2: Only draw two cards
        3:   44:  for (i = 0; i < 2; i++) {
        2:   45:    drawCard(*currentPlayer, state);
        -:   46:  }
        -:   47:
        -:   48:  // discard card from hand
        1:   49:  discardCard(*handPos, *currentPlayer, state, 0);
        -:   50:
        1:   51:  return 0;
        -:   52:}
        -:   53:
        1:   54:int cardEffect_CouncilRoom(int *currentPlayer, struct gameState *state,
        -:   55:                           int *handPos) {
        -:   56:  int i;
        -:   57:  //+4 Cards
        5:   58:  for (i = 0; i < 4; i++) {
        4:   59:    drawCard(*currentPlayer, state);
        -:   60:  }
        -:   61:
        -:   62:  //+1 Buy
        -:   63:  //state->numBuys++;
        -:   64:  // Error 3 : Do not increase number of buys
        -:   65:
        -:   66:  // Each other player draws a card
        4:   67:  for (i = 0; i < state->numPlayers; i++) {
        3:   68:    if (i != *currentPlayer) {
        2:   69:      drawCard(i, state);
        -:   70:    }
        -:   71:  }
        -:   72:
        -:   73:  // put played card in played card pile
        1:   74:  discardCard(*handPos, *currentPlayer, state, 0);
        -:   75:
        1:   76:  return 0;
        -:   77:}
        -:   78:
        3:   79:int cardEffect_Feast(int *currentPlayer, struct gameState *state, int *handPos,
        -:   80:                     int *temphand, int *choice1, int *x) {
        -:   81:  int i;
        3:   82:  int cardOffset = 0;
        -:   83:  // gain card with cost up to 5
        -:   84:  // Backup hand
        6:   85:  for (i = 0; i < state->handCount[*currentPlayer]; i++) {
        3:   86:    temphand[i] = state->hand[*currentPlayer][i]; // Backup card
        3:   87:    state->hand[*currentPlayer][i] = -1;          // Set to nothing
        -:   88:  }
        -:   89:  // Backup hand
        -:   90:
        -:   91:  // Update Coins for Buy
        3:   92:  updateCoins(*currentPlayer, state, 5);
        3:   93:  *x = 1;           // Condition to loop on
        9:   94:  while (*x == 1) { // Buy one card
        3:   95:    if (supplyCount(*choice1, state) <= 0) {
        -:   96:      if (DEBUG)
        -:   97:        printf("None of that card left, sorry!\n");
        -:   98:
        -:   99:      if (DEBUG) {
        -:  100:        printf("Cards Left: %d\n", supplyCount(*choice1, state));
        -:  101:      }
        1:  102:      *x=0;
        2:  103:    } else if (state->coins < getCost(*choice1)) {
        1:  104:      printf("That card is too expensive!\n");
        1:  105:      *x=0;
        -:  106:      if (DEBUG) {
        -:  107:        printf("Coins: %d < %d\n", state->coins, getCost(*choice1));
        -:  108:      }
        -:  109:    } else {
        -:  110:
        -:  111:      if (DEBUG) {
        -:  112:        printf("Deck Count: %d\n",
        -:  113:               state->handCount[*currentPlayer] +
        -:  114:                   state->deckCount[*currentPlayer] +
        -:  115:                   state->discardCount[*currentPlayer]);
        -:  116:      }
        -:  117:
        -:  118:      //gainCard(*choice1, state, 0, *currentPlayer); // Gain the card
        1:  119:      gainCard(*choice1, state, 2, *currentPlayer); // Gain the card
        1:  120:      *x = 0;                                       // No more buying cards
        -:  121:      // This is required to prevent overwriting the new card...
        -:  122:      //cardOffset = 1;
        -:  123:
        -:  124:      if (DEBUG) {
        -:  125:        printf("Deck Count: %d\n",
        -:  126:               state->handCount[*currentPlayer] +
        -:  127:                   state->deckCount[*currentPlayer] +
        -:  128:                   state->discardCount[*currentPlayer]);
        -:  129:      }
        -:  130:    }
        -:  131:  }
        -:  132:
        -:  133:  // Reset Hand
        7:  134:  for (i = 0; i < state->handCount[*currentPlayer] - cardOffset; i++) {
        -:  135:  //for (i = 0; i <= state->handCount[*currentPlayer]; i++) {
        4:  136:    state->hand[*currentPlayer][i] = temphand[i];
        -:  137:    // Error 4 : Don't reset hand.
        -:  138:    //temphand[i] = -1;
        -:  139:  }
        -:  140:  // Reset Hand
        -:  141:
        3:  142:  return 0;
        -:  143:}
        -:  144:
    #####:  145:int cardEffect_Mine(int *currentPlayer, struct gameState *state, int *handPos,
        -:  146:                    int *choice1, int *choice2) {
        -:  147:  int i;
    #####:  148:  int j = state->hand[*currentPlayer][*choice1]; // store card we will trash
        -:  149:
    #####:  150:  if (state->hand[*currentPlayer][*choice1] < copper ||
    #####:  151:      state->hand[*currentPlayer][*choice1] > gold) {
    #####:  152:    return -1;
        -:  153:  }
        -:  154:
    #####:  155:  if (*choice2 > treasure_map || *choice2 < curse) {
    #####:  156:    return -1;
        -:  157:  }
        -:  158:
    #####:  159:  if ((getCost(state->hand[*currentPlayer][*choice1]) + 3) >
    #####:  160:      getCost(*choice2)) {
    #####:  161:    return -1;
        -:  162:  }
        -:  163:
    #####:  164:  gainCard(*choice2, state, 2, *currentPlayer);
        -:  165:
        -:  166:  // discard card from hand
    #####:  167:  discardCard(*handPos, *currentPlayer, state, 0);
        -:  168:
        -:  169:  // discard trashed card
    #####:  170:  for (i = 0; i < state->handCount[*currentPlayer]; i++) {
    #####:  171:    if (state->hand[*currentPlayer][i] == j) {
    #####:  172:      discardCard(i, *currentPlayer, state, 0);
    #####:  173:      break;
        -:  174:    }
        -:  175:  }
        -:  176:
    #####:  177:  return 0;
        -:  178:}
